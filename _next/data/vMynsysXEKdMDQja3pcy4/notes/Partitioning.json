{"pageProps":{"title":"Partitioning","content":"### Partitioning\nPartitioning is a process of storing one dataset in several partitions in one dataset. Usually each node stores one or some  small subset of partitions. This allows to svale whenthe whole dataset is too big to be handled by a single node.\n\nUsually partitioning is used in combination with replication.\n\n### Partitioning by key range\nData can be partitioned by key range. This approach is simple and allows to make range requests fast.\n\nOn the other hand, this approach is prone to create hot spots. Hot spot is a node which has too much data comparing to other nodes.\n\n### Partitioning by hash key\nData can be partitioned not by key itself but its hash. This approach creates more uniformed distribution of data.\n\nOn the other hand, range queries will require to hit all partitions and it will be slower. It will be as slow as the slowest partition response.\n\n### Partitioning and secondary indexes\n1. If secondary infeces are supported it will require to hit all partitions to run a query.\n2. We can also partition secondary index itself by term: some range of terms will be stored in one partition, some in another, etc. This approach has the same downside as with followers: writes to some nodes may be slower than to other nodes and we will not be able to read the written fata immediately.\n\n### Rebalancing partitions\nWe may want to add more partitions if:\n1. We need better throughtput with the same amount of data.\n2. We significanttly increase our dataset and want to keep throughtput at the same level.\n3. We need to replace a failed node.\n\n\"Key mod N\" approach doesn't work because if we increase number of machines (N) it will cause significant data move.\n\nWe can create a fixed number of partitions from the beginning, like 1000 partitions in 10 nodes (each node has 100 partitions). Later if we add more nodes we just need to move some of existing partitions from each node and we will not touch other partitions. Elasticsearch uses this approach.\n\nWr can also create dynamuc partitions: if our partition exceeds dome limit we will break it into two partitions. We can also merge small partitions after mass deletion of records. Mongodb uses dynamic partitioning.\n\nCassandra uses fixed number of partitions per node. When a new node is added part of existing partitions split into two and then moved to the new node.\n\n### Request routing\nClient can connect to:\n1. Partition node and the node will either return data or request an appropriate node and then return the data to client.\n2. Proxy which is aware about partitions and will request data from an appropriate node.\n3. Partition directly. In this case client should be aware about nodes and partitions.\n"},"__N_SSG":true}
{"pageProps":{"title":"Prometheus","content":"### What Prometheus is\nPrometheus is an open-source systems monitoring and alerting toolkit.\nPrometheus pulls metrics from targets and stores it as multiple time-series in an aggregated format.\n  - [Official documentation](https://prometheus.io/docs/introduction/overview)\n\n### Architecture\n\n![Prometheus architecture](https://prometheus.io/assets/architecture.png \"Prometheus architecture\")\n\n### Alertmanager\nPrometheus sends notifications to Alertmanager based on rules in config. Alertmanager integrates with Opsgenie, Slack, or other notification systems.\n\n### Exporter\nExporter is used to expose OS or database metrics for Prometheus to scrape\n\n### Push gateway\nPrometheus always uses pull but if you need to use push you can set PushGateway: Prometheus will pull from PushGateway and your system will push to PushGateway.\n\n### Data model\n\nTime series in Prometheus consists of multiple samples. Each sample is a pair of millisecond-precision timestamp and a float64 value.\n```\n123.45@1702749856.001\n```\n\nEach time series has a set of labels and values associated with it. Metric name is a special value for `__name__` label.\n\n\n### Counter metric type\nUse it when value is increased.\n\nThere is a simple algorithm to compute the increase of counter between scrapes from t1 to t2 is:\n- if counter(t2) >= counter(t1) then increase=counter(t2)-counter(t1)\n- if counter(2) < counter(t1)then increase=counter(t2)\n\n### Gauge metric type\nUse it when value is increased and decreased.\n\n### Histogram metric type\nUse it when you need to know when some percent of your values are above or below a threshold. Like 90% of latency is less than 100 ms.\n\n### Instant vector\nAn instant vector selector returns an instant vector of the most recent samples before the query evaluation time.\n```\nprocess_cpu_seconds_total\n```\n### Range vector\nA range vector selector returns many samples for each time series. Range vectors are always used with increase, rate or a similar function:\n```\nrate(process_cpu_seconds_total[1m])\n```\n### Offset\nOffset allows to look back into the past.\n```\nrate(process_cpu_seconds_total[1m]) offset 1h\n```\n"},"__N_SSG":true}
{"pageProps":{"title":"Node.js architecture","content":"#### Main components\n1. JavaScript is run in a single thread with V8 engine.\n2. I/O is implemented with libuv library.\n3. C++ addons for low-level operations like compression or encryption.\n\n#### Difference between network and file I/O\n1. Network I/O uses operating system notification mechanisms.\n2. Thread pool is used for file I/O because file operations are blocking in libuv. Libuv developers decided to simplify file I/O implementation. \n\n`process.env.UV_THREADPOOL_SIZE` is used to set number of threads in the pool. By default the thread pool has 4 threads. The threadpool is also used for compression and encryption.\n\n#### Event loop\nEvent loop consists of several phases. Each phase has a FIFO queue of callbacks. Phase is finished when either all callback were called or when a sertain limit of calls was reached.\n1. Timers: executes callbacks scheduled with setTimeout and setInterval.\n2. Pending callbacks: executes callbacks deferred to the next iteration (due to a limit of calls).\n3. Idle, prepare: used internally.\n4. Poll: retrieves new I/O events and execute all I/O callbacks (except socket closing).\n5. Check: executes callbacks scheduled with setImmediate. Useful in I/O callbacks to run something right after poll phase was finished.\n6. Close callbacks: socket close callbacks.\nhttps://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\n\n#### process.nextTick\nnextTick callback is executed right after current operation finishes before other callbacks in a queue. In this sense setImmediate should be called nextTick.\n\n#### Memory\n1. Code\n2. Call stack\n3. Heap\n\n\nBy default it's 1.4 Gb. `--max-old-space-size` allows to increase memory limit.\n\n#### Garbage collector\nHeap separated into two spaces:\n1. New space. Usually from 1 to 8 Mb. Garbage collection is performed frequently here.\n2. Old space. Garbage collection is rare here.\n\n#### See also\n- [The Node.js event loop, Timers, and process.nextTick](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick)\n- [Don't block the event loop](https://nodejs.org/en/docs/guides/dont-block-the-event-loop)\n- [Node.js event loop](https://blog.insiderattack.net/handling-io-nodejs-event-loop-part-4-418062f917d1)\n- [Exploring Node.js internals](https://www.smashingmagazine.com/2020/04/nodejs-internals)\n\n#### Related notes\n- [Engineering &rarr;](/notes/Engineering)"},"__N_SSG":true}
{"pageProps":{"title":"Event-driven systems and Kafka","content":"### Why event-driven systems\nWhen you start a company with 2-3 engineers usually you don't need event driven systems. It makes sense to use an async architecture if you have a big apllication and several teams working on it. Linkedin created Kafka to cope with their growth.\n\n\n### Commands, events, and queries\nCommand is an action that must be performed by remote service in a synchronous manner.\n\nEvent is a business fact that something happened. Usually it makes sense to persist a business fact. Producer sends an event and forgets about it.\n\nQuery is a request to get data. Query doesn't change state.\n\n\n### Kafka\nWe can use Kafka streams to query necessary data. Several streams can be combined to create a new stream.\n\nKafka stores data locally to avoid network calls. Kafka is distributed so it will continue working if a partition fails.\n\n\n### See also\n- [Designing event driven systems by Ben Stopford](https://www.confluent.io/designing-event-driven-systems)\n\n\n### Related notes\n- [Engineering &rarr;](/notes/Engineering)"},"__N_SSG":true}
{"pageProps":{"title":"Kubernetes","content":"### 1. What Kubernetes is\n  Kubernetes is a platform which allows to run and manage containerized applications.\n\n### 2. Kubernetes concepts\n#### Annotation\n  Allows to store addition information with a Kubernetes object; can have a big size.\n\n#### ConfigMap\n  Stores environment variables.\n\n#### CronJob\n  Used for background tasks run on time; under different conditions may run 0, 1 or more than 1 time.\n\n#### DaemonSet\n  Runs a copy of a pod on each node; usually used for logging and metric collection.\n\n#### Deployment\n  Updates a replica set or a pod; implements rolling updates and rolbacks.\n\n#### Job\n  Creates one or more pods and ensures they are successfully terminated after execution; can restart if it fails.\n\n#### HorizontalPodAutoscaler\n  Scales deployment or replica set basing on CPU usage or other metrics.\n\n#### Ingress\n  Is a router that accepts incoming traffic and maps URLs to services; can implement TLS termination.\n\n#### Label\n  Are key-value pairs that are used to identify Kubernetes objects.\n\n#### Name\n  Every object in Kubernetes has a human-readable name and unique id (UID).\n\n#### Namespace\n  Allow to organize a set of Kubernetes resources inside a Kubernetes cluster into a virtual cluster; nodes and persistent volumes doesn't belong to a namespace.\n\n#### Pod\n  Runs one or more containers with the same IP Address.\n\n#### ReplicaSet\n  Allows to run multiple copies of a pod for higher availability.\n\n#### Secret\n  Used to store backend credentials.\n\n#### Service\n  Allows to address a collection of pods for network communication.\n\n#### Volume\n  Is a directory that is accessible to all containers in a pod.\n\n#### Liveness probe\nLiveness probe checks if a pod is working: if not then Kubernetes restarts the pod.\n\n#### Readiness probe\nReadiness probe checks if a pod is able to serve requests: if not then Kubernetes will not send requests to the service. Pod can accept traffic only if all containers are ready.\n\n### 3. Kubernetes commands\n#### Useful aliases\nkp='kubectl -n my-namespace --kubeconfig ~/.kube/config-prod'\n\nkp-port-forward='kp port-forward svc/elasticsearch-master 9200:9200'\n\n#### Show pods in all namespaces\nkp get pod -A\n\n#### Show services\nkp get service\n\n#### Show deployments\nkp get deployment\n\n#### Show nodes\nkp get node\n\n#### Show persistence volume claims\nkp get pvc\n\n#### Run shell in a pod container\nkp exec -ti pod-name -c container-name -- /bin/bash\n\n#### Copy a file from a pod\nkp cp -c container-name pod-name:/srv/app/file_name.log file_name.log\n\n#### Double dash in a command\nThe double dash ( -- ) in kubectl command separates the arguments you want to pass to the command from the kubectl arguments.\n\n### 4. Kubernetes service types\n#### ClusterIP\nDefault service type; exposes service by IP inside Kubernetes cluster.\n\n#### NodePort\nExposes service externally using each node IP address and a predefined port.\n\n#### LoadBalancer\nExposes service externally with a load balancer per one service.\n\n#### ExternalName\nWorks like a proxy for an external service by DNS name.\n\n### 5. Kubernetes volume types\n#### EmptyDir\nNot persistent (when pod is restarted its data is lost), starts empty and allows to share folder between containers of the same pod (when explicitly mounted).\n\n#### GitRepo\nNot persistent, starts with data from a public Git repo and allows to share folder between containers of the same pod\n\n#### Secret\nIn-memory directory to pass credentials to pods.\n\n#### HostPath\nPersistent on a node, usually is used with DaemonSet.\n\n#### PersistentVolume\nPersistent, created by admin with a given technology (like GCEPersistentDisk), capacity and access modes.\n\n#### PersistentVolumeClaim\nAbstracts away from a given technology by pointing to PersistentVolume.\n"},"__N_SSG":true}
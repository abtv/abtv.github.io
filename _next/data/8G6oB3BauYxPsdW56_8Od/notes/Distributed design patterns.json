{"pageProps":{"title":"Distributed design patterns","content":"### Circuit breaker\nThis pattern prevents a retry storm when a service is degraded and can't recover because it's clients use Retry pattern and create extra load to the service.\nA circuit breaker acts as a proxy for operations that might fail. The proxy can be in the following states:\n1. **Closed**: the Circuit Breaker allows to execute all requests but it counts number of failures. If number of failures exceed a given threshold for some period of time then the Circuit Breaker goes to Open state and starts a timer. When the timer ends the Circuit Breaker will go to Half-open state. The timeout gives time to the service to recover.\n2. **Open**: a request to the service fails immediately.\n3. **Half-open**: a very limited number of requests is allowed to be executed and if they are successful then the Circuit Breaker goes to Closed state otherwise it goes to Open state.\n\n### Index table\nNoSQL database may support only primary key indexing.\n\nIf we need to implement a fast search by a non-primary key field we can create an \"index table\" which has the field as a primary key and has a pointer to the main table.\n\n### Retry with backoff\nAn API call may fail due to different transient problems: network connectivity issues or temporal service unavailability.\n\nTo solve the issue a service can implement several attempts to retry an API call with a delay between the attempts. The delay may be random in a given range or exponential (also in a given range).\n\nRetries may create a retry storm and to avoid it you may need to implement a Circuit Breaker.\n\nAlways specify a timeout for a network request.\n\nYour API calls should be idempotent.\n"},"__N_SSG":true}